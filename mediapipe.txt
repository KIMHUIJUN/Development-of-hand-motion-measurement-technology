angle = file[:,:-1].astype(np.float32)
label = file[:, -1].astype(np.float32)
knn = cv2.ml.KNearest_create()
knn.train(angle, cv2.ml.ROW_SAMPLE, label)






knn = cv2.ml.KNearest_create()

â—† create()
static Ptr<KNearest> cv::ml::KNearest::create	(		)	
static
Python:
cv.ml.KNearest.create() ->	retval
cv.ml.KNearest_create() ->	retval
Creates the empty model.

The static method creates empty KNearest classifier. 
It should be then trained using StatModel::train method.


knn.train(angle, cv2.ml.ROW_SAMPLE, label)



Parameters
samples	Input samples stored by rows. It is a single-precision floating-point matrix of <number_of_samples> * k size.
k	Number of used nearest neighbors. Should be greater than 1.
results	Vector with results of prediction (regression or classification) for each input sample. It is a single-precision floating-point vector with <number_of_samples> elements.
neighborResponses	Optional output values for corresponding neighbors. It is a single- precision floating-point matrix of <number_of_samples> * k size.
dist	Optional output distances from the input vectors to the corresponding neighbors. It is a single-precision floating-point matrix of <number_of_samples> * k size.



if result.multi_hand_landmarks is not None:
        rps_result = []

        for res in result.multi_hand_landmarks:
            joint = np.zeros((21, 3))
            for j, lm in enumerate(res.landmark):
                joint[j] = [lm.x, lm.y, lm.z]

            # Compute angles between joints
            v1 = joint[[0,1,2,3,0,5,6,7,0,9,10,11,0,13,14,15,0,17,18,19],:] # Parent joint
            v2 = joint[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],:] # Child joint
            v = v2 - v1 # [20,3]
            # Normalize v
            v = v / np.linalg.norm(v, axis=1)[:, np.newaxis]

            # Get angle using arcos of dot product
            angle = np.arccos(np.einsum('nt,nt->n',
                v[[0,1,2,4,5,6,8,9,10,12,13,14,16,17,18],:], 
                v[[1,2,3,5,6,7,9,10,11,13,14,15,17,18,19],:])) # [15,]

            angle = np.degrees(angle) # Convert radian to degree

            # Inference gesture
            data = np.array([angle], dtype=np.float32)